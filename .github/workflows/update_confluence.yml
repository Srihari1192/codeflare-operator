name: Update Confluence Table

on:
  workflow_dispatch: 
    inputs:
      rhoai-release-version:
        description: 'RHOAI Release Version'
        required: true
      kueue-version:
        description: 'Kueue Version'
        required: true
      codeflare-sdk-version:
        description: 'CodeFlare Version'
        required: true

jobs:
  update-confluence:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Fetch Current Page Content and update table
        run: |
          RHOAI_RELEASE_VERSION="${{ github.event.inputs.rhoai-release-version }}"
          KUEUE_VERSION="${{ github.event.inputs.kueue-version }}"
          CODEFLARE_SDK_VERSION="${{ github.event.inputs.codeflare-sdk-version }}"

          echo "Fetching Confluence Page..."
          response=$(curl  -H "Authorization: Bearer ${{ secrets.CONFLUENCE_API_TOKEN }}" \
            "${{ secrets.CONFLUENCE_BASE_URL }}/rest/api/content?title=${{ secrets.PAGE_TITLE }}&spaceKey=${{ secrets.SPACE_KEY }}&expand=body.storage,version")
          
          echo "$response"
          echo "Raw API Response:"
          echo "$response" | jq '.' > page_data.json
          
          PAGE_VERSION=$(jq '.results[0].version.number' page_data.json)
          echo "Extracted Version: $PAGE_VERSION"

          if [[ -z "$PAGE_VERSION" || "$PAGE_VERSION" == "null" ]]; then
            echo "Error: Could not retrieve current page version."
            exit 1
          fi
          echo "PAGE_VERSION=$PAGE_VERSION" >> $GITHUB_ENV

          EXISTING_CONTENT=$(jq -r '.results[0].body.storage.value' page_data.json)

          # Debug extracted content
          echo "Existing Content: $EXISTING_CONTENT"

          if [[ -z "$EXISTING_CONTENT" || "$EXISTING_CONTENT" == "null" ]]; then
            echo "Error: Could not retrieve existing page content."
            exit 1
          fi

          echo "Checking if RHOAI_RELEASE_VERSION ($RHOAI_RELEASE_VERSION) exists in the table..."
          
          if echo "$EXISTING_CONTENT" | grep -q "<td>$RHOAI_RELEASE_VERSION</td>"; then
            echo "RHOAI_RELEASE_VERSION exists. Updating values..."
            
            UPDATED_CONTENT=$(echo "$EXISTING_CONTENT" | awk -v version="$RHOAI_RELEASE_VERSION" -v new_codeflare="$CODEFLARE_SDK_VERSION" -v new_kueue="$KUEUE_VERSION" '
              BEGIN { RS="<tr>"; ORS="<tr>"; count=0 }
              count == 0 && $0 ~ "<td>" version "</td>" {
                gsub(/<td>[^<]+<\/td><td>[^<]+<\/td><td>[^<]+<\/td>/, "<td>" version "</td><td>" new_kueue "</td><td>" new_codeflare "</td>")
                count=1
              }
              { print }
            ' | sed 's/<tr>$//')

            echo "UPDATED_CONTENT in if: $UPDATED_CONTENT"
          else
            echo "RHOAI_RELEASE_VERSION does not exist. Adding a new row..."
            NEW_ROW="<tr class=\"\"><td>$RHOAI_RELEASE_VERSION</td><td>$CODEFLARE_SDK_VERSION</td><td>$KUEUE_VERSION</td></tr>"
            UPDATED_CONTENT=$(echo "$EXISTING_CONTENT" | awk -v new_row="$NEW_ROW" '{gsub("</tbody>", new_row"</tbody>")}1')
            echo "UPDATED_CONTENT in else : $UPDATED_CONTENT"
          fi

          # echo "creating new row"
          # NEW_ROW="<tr class=\"\"><td>$RHOAI_RELEASE_VERSION</td><td>$CODEFLARE_SDK_VERSION</td><td>$KUEUE_VERSION</td></tr>"
          # echo "New row: $NEW_ROW"

          # # Insert new row before </tbody>
          # UPDATED_CONTENT=$(awk -v new_row="$NEW_ROW" '{gsub("</tbody>", new_row"</tbody>")}1' <<< "$EXISTING_CONTENT")

          # # Insert new row before </tbody> and remove extra newlines
          # UPDATED_CONTENT=$(echo "$EXISTING_CONTENT" | awk -v new_row="$NEW_ROW" '{gsub("</tbody>", new_row"</tbody>")}1' | tr -d '\n')

          # echo "UPDATED_CONTENT after row insertion: $UPDATED_CONTENT"

          # Correct JSON encoding without double escaping
          UPDATED_CONTENT=$(jq -n --arg content "$UPDATED_CONTENT" '$content')

          echo "Final UPDATED_CONTENT: $UPDATED_CONTENT"


          NEW_VERSION=$(( PAGE_VERSION + 1 ))

          if [[ -n "$UPDATED_CONTENT" && "$UPDATED_CONTENT" != "null" ]]; then
              echo "Updating Confluence Page using put request..."
              curl -X PUT "${{ secrets.CONFLUENCE_BASE_URL }}/rest/api/content/${{ secrets.CONFLUENCE_PAGE_ID }}" \
                  -H "Authorization: Bearer ${{ secrets.CONFLUENCE_API_TOKEN }}" \
                  -H "Content-Type: application/json" \
                  -d "{
                    \"id\": \"${{ secrets.CONFLUENCE_PAGE_ID }}\",
                    \"type\": \"page\",
                    \"title\": \"Release Details\",
                    \"space\": { \"key\": \"${{ secrets.SPACE_KEY }}\" },
                    \"body\": {
                    \"storage\": {
                    \"value\": $UPDATED_CONTENT,
                    \"representation\": \"storage\"
                    }
                  },
                  \"version\": {
                    \"number\": $NEW_VERSION
                  }
                }"
          else
              echo "Error: UPDATED_CONTENT is null or empty. Skipping PUT request."
          fi
